<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
	TODO: unresolved issues

	text:
	"p &lt;&lt; end
	print me!
	end"
	symptoms:
	not recognized as a heredoc
	solution:
	there is no way to distinguish perfectly between the &lt;&lt; operator and the start
	of a heredoc. Currently, we require assignment to recognize a heredoc. More
	refinement is possible.
	• Heredocs with indented terminators (&lt;&lt;-) are always distinguishable, however.
	• Nested heredocs are not really supportable at present

	text:
	print &lt;&lt;-'THERE'
	This is single quoted.
	The above used #{Time.now}
	THERE
	symtoms:
	From Programming Ruby p306; should be a non-interpolated heredoc.

	text:
	"a\332a"
	symptoms:
	'\332' is not recognized as slash3.. which should be octal 332.
	solution:
	plain regexp.. should be easy.

    text:
    val?(a):p(b)
    val?'a':'b'
    symptoms:
    ':p' is recognized as a symbol.. its 2 things ':' and 'p'.
    :'b' has same problem.
    solution:
    ternary operator rule, precedence stuff, symbol rule.
    but also consider 'a.b?(:c)' ??
</string>
	<key>fileTypes</key>
	<array>
		<string>rb</string>
		<string>rbx</string>
		<string>rjs</string>
		<string>Rakefile</string>
		<string>rake</string>
		<string>cgi</string>
		<string>fcgi</string>
		<string>gemspec</string>
		<string>irbrc</string>
		<string>capfile</string>
		<string>Gemfile</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/.*\bruby</string>
	<key>foldingStartMarker</key>
	<string>(?x)^
	    (\s*+
	        (module|class|def(?!.*\bend\s*$)
	        |unless|if
	        |case
	        |begin
	        |for|while|until
	         |^=begin
	        |(  "(\\.|[^"])*+"          # eat a double quoted string
	         | '(\\.|[^'])*+'        # eat a single quoted string
	         |   [^#"']                # eat all but comments and strings
	         )*
	         (                        \s   (do|begin|case)
	         | (?&lt;!\$)[-+=&amp;|*/~%^&lt;&gt;~] \s*+ (if|unless)
	         )
	        )\b
	        (?! [^;]*+ ; .*? \bend\b )
	    |(  "(\\.|[^"])*+"              # eat a double quoted string
	     | '(\\.|[^'])*+'            # eat a single quoted string
	     |   [^#"']                    # eat all but comments and strings
	     )*
	     ( \{ (?!  [^}]*+ \} )
	     | \[ (?! [^\]]*+ \] )
	     )
	    ).*$
	|   [#] .*? \(fold\) \s*+ $         # Sune’s special marker
	</string>
	<key>foldingStopMarker</key>
	<string>(?x)
		(   (^|;) \s*+ end   \s*+ ([#].*)? $
		|   (^|;) \s*+ end \. .* $
		|   ^     \s*+ [}\]] ,? \s*+ ([#].*)? $
		|   [#] .*? \(end\) \s*+ $    # Sune’s special marker
		|   ^=end
		)</string>
	<key>keyEquivalent</key>
	<string>^~R</string>
	<key>name</key>
	<string>Ruby</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.class.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.ruby</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.ruby</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.ruby</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>variable.other.object.ruby</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(class)\s+(([.a-zA-Z0-9_:]+(\s*(&lt;)\s*[.a-zA-Z0-9_:]+)?)|((&lt;&lt;)\s*[.a-zA-Z0-9_:]+))</string>
			<key>name</key>
			<string>meta.class.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.module.ruby</string>
				</dict>
				<key>2</key>
				<dict>
				