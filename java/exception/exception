Exception -
            |--  Checked Exception  : compile time Exception
            |--  Uncheked Exception : runtime Exception

 

try         : try block where Exception can happen
catch       : catch block excuted when the give exception happens
finally     : finally block executed anyway either exception happens or not
throws      : it specify mathod may throw given exception 
throw       : throw an exception



** try block should not be alone it show be followed by catch and then finally block ( finally block is optional)

** multiple catch block
    * at a time only one exception occur and at a time only one catch block is executed
    * all catch block must be ordered from most specific to general . i.e. ArithmaticException should be first then Exception
        else there is compile time error

    try{
    System.out.println(5/0);
    }
    catch(ArithmaticException e){
    // handled 1
    }
    catch(Exception e){
    // handled 2
    }

** nexted try block 
     * sometime when a part of block cause one error and the entire block may cause another error
        then we use nested try block
     * when during handling one excetion antoher exception happens

        try{
            try{
               System.out.println(5/0);
            }
            catch(ArithmeticException e){
               System.out.println("handled ArithmeticException");
               int[] a = new int[2];
               System.out.println(a[6]);
            }
        }
        catch(Exception e){
            System.out.println("handled ArrayIndexOutOfBoundException");
        }
 

** jvm execute finally block if the Exception is not handled by programmer and exits

** throw
        
        throw new ExceptionClass(parameter);

** throws
      * throws keyword only required for checked exception
      * if we define throws in a method then the caller of the method have to handle the exception or will get compile timer error

      void example throws MyException{
          SOP("hello");
          throw new MyException("message");
      }
      
      void main(){
          try{
          example()
          }
          catch(MyException e){
               SOP("exception handled");
          }
      }
 

** Exception Handling in MethodOverloading in Java

    * if superclass method does not declare an exception
        -- then subclass overridden mathod can't declare checked Exception
            but can declare unchecked Exception

    * if supercalss method declare an exception then
        -- subclass may not declare any exception
        -- subclass can declare same Exception
        -- subclass can declare child Exception of superclass Exception class
        -- but subclass can't declare parent Exception of superclass Exception class


